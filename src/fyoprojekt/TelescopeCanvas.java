/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fyoprojekt;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

/**
 *
 * @author fast4shoot
 */
public class TelescopeCanvas extends javax.swing.JPanel {

    private Iterable<Element> elems;
    private Point raySource;
    
    /**
     * Creates new form TelescopeCanvas
     */
    public TelescopeCanvas() {
        initComponents();
    }

    public Iterable<Element> getElems() {
        return elems;
    }

    public void setElems(Iterable<Element> elems) {
        this.elems = elems;
        repaint();
    }

    public Point getRaySource() {
        return raySource;
    }

    public void setRaySource(Point raySource) {
        this.raySource = raySource;
        repaint();
    }
    
    @Override
    public Dimension getPreferredSize() {
        return new Dimension(800,800);
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);       
        
        if (raySource == null || elems == null) return;
        
        Graphics2D g2d = (Graphics2D) g;
        g2d.setStroke(new BasicStroke(2));
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        int size = Math.min(getWidth(), getHeight());
        int xoffset = (getWidth() - size) / 2;
        int yoffset = (getHeight() - size) / 2;
        g.translate(xoffset, yoffset);
        
        for (int i = -5; i <= 5; i++) {
            paintRay(new Ray(new Vector(0.0, i * 0.01).add(raySource), new Vector(1.0, 0), 1.0), g, new Color(255, 10, 20, 127), size, size);
        }
        
        g.setColor(Color.BLACK);
        for (Element elem : elems)
        {
            elem.paint(g, size, size);
        }
    } 
    
    void paintRay(Ray ray, Graphics g, Color color, int w, int h)
    {
        Element hitElem = null;
        while(ray.getIntensity() > 0.000001)
        {
            Ray newRay = null;
            Element newHitElem = null;
            double minDist = Double.MAX_VALUE;
            for (Element elem : elems)
            {
                Ray candidateRay = elem.testHit(ray);
                if (candidateRay != null)
                {
                    double dist = new Vector(ray.getPoint(), candidateRay.getPoint()).length();
                    if (dist < minDist && (hitElem != elem))// || dist > 0.001))
                    {
                        newRay = candidateRay;
                        newHitElem = elem;
                        minDist = dist;
                    }
                }
            }
            
            if (newRay != null)
            {
                g.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), (int)Math.round(color.getAlpha() * ray.getIntensity())));
                g.drawLine(
                    (int)Math.round(ray.getPoint().x() * w),
                    (int)Math.round((1.0 - ray.getPoint().y()) * h),
                    (int)Math.round(newRay.getPoint().x() * w),
                    (int)Math.round((1.0 - newRay.getPoint().y()) * h));
                ray = newRay;
                hitElem = newHitElem;
            }
            else
            {
                break;
            }
        }
        
        Point lastPoint = ray.getDirection().add(ray.getPoint());
        g.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), (int)Math.round(color.getAlpha() * ray.getIntensity())));
        g.drawLine(
            (int)Math.round(ray.getPoint().x() * w),
            (int)Math.round((1.0 - ray.getPoint().y()) * h),
            (int)Math.round(lastPoint.x() * w),
            (int)Math.round((1.0 - lastPoint.y()) * h));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
